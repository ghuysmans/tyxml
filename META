version = "4.1.0"
description = "Statically correct HTML and SVG documents"
requires = "tyxml.functor re uutf"
archive(byte) = "tyxml.cma"
archive(byte, plugin) = "tyxml.cma"
archive(native) = "tyxml.cmxa"
archive(native, plugin) = "tyxml.cmxs"
archive(byte,toploop) += "tyxml_top.cma"
exists_if = "tyxml.cma"

package "functor" (
 version = "4.1.0"
 description = "Statically correct HTML and SVG documents (Functor version)"
 requires = "uchar uutf re"
 archive(byte) = "tyxml_f.cma"
 archive(byte, plugin) = "tyxml_f.cma"
 archive(native) = "tyxml_f.cmxa"
 archive(native, plugin) = "tyxml_f.cmxs"
 exists_if = "tyxml_f.cma"
)

package "top" (
 version = "4.1.0"
 description = "Toplevel printers for HTML, SVG and XML"
 requires = "tyxml"
 archive(byte) = "tyxml_top.cma"
 archive(byte, plugin) = "tyxml_top.cma"
 archive(native) = "tyxml_top.cmxa"
 archive(native, plugin) = "tyxml_top.cmxs"
 exists_if = "tyxml_top.cma"
)

package "tools" (
 version = "4.1.0"
 description = "Statically correct HTML and SVG documents"
 requires = "bytes"
 archive(byte) = "tyxml_tools.cma"
 archive(byte, plugin) = "tyxml_tools.cma"
 archive(native) = "tyxml_tools.cmxa"
 archive(native, plugin) = "tyxml_tools.cmxs"
 exists_if = "tyxml_tools.cma"
)

## PPX
package "ppx" (
 version = "4.1.0"
 description = "HTML and SVG syntax extension (ppx)"
 requires = "tyxml"
 requires(custom_ppx) = "tyxml.ppx.internal"
 ppx(-custom_ppx,-ppx_driver) = "./ppx_tyxml_ex --as-ppx"
 archive(byte,ppx_driver) = "ppx_tyxml.cmo"
 archive(native,ppx_driver) = "ppx_tyxml.cmx"
 plugin(byte,ppx_driver) = "ppx_tyxml.cma"
 plugin(native,ppx_driver) = "ppx_tyxml.cmxs"

 package "internal" (
  version = "4.1.0"
  description = "HTML and SVG ppx library"
  requires = "re.str ppx_tools_versioned ocaml-migrate-parsetree markup tyxml.tools"
  archive(byte) = "ppx_tyxml_internal.cma"
  archive(byte, plugin) = "ppx_tyxml_internal.cma"
  archive(native) = "ppx_tyxml_internal.cmxa"
  archive(native, plugin) = "ppx_tyxml_internal.cmxs"
  exists_if = "ppx_tyxml_internal.cma"
 )
)

## CAMLP4

package "syntax" (
 version = "4.1.0"
 description = "HTML and SVG syntax extension"
 requires = "bytes camlp4"
 archive(syntax, preprocessor) = "pa_tyxml.cma"
 archive(syntax, toploop) = "pa_tyxml.cma"
 archive(syntax, preprocessor, native) = "pa_tyxml.cmxa"
 archive(syntax, preprocessor, native, plugin) = "pa_tyxml.cmxs"
 requires(toploop) = "tyxml"
 exists_if = "pa_tyxml.cma"
)
package "parser" (
 version = "4.1.0"
 description = "Simple XML parser"
 requires = "bytes camlp4.lib"
 archive(byte) = "tymlx_p.cma"
 archive(byte, plugin) = "tymlx_p.cma"
 archive(native) = "tymlx_p.cmxa"
 archive(native, plugin) = "tymlx_p.cmxs"
 exists_if = "tymlx_p.cma"
)

